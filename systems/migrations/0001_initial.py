# Generated by Django 4.2.6 on 2023-10-28 09:12

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('factions', '0001_initial'),
        ('agents', '0001_initial'),
        ('fleet', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='JumpGate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jump_range', models.IntegerField(verbose_name='the maximum jump range of the gate.')),
            ],
        ),
        migrations.CreateModel(
            name='Market',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('symbol', models.CharField(max_length=500, primary_key=True, serialize=False)),
                ('sector_symbol', models.CharField(max_length=500)),
                ('system_type', models.CharField(choices=[('NEUTRON_STAR', 'Neutron Star'), ('RED_STAR', 'Red Star'), ('ORANGE_STAR', 'Orange Star'), ('BLUE_STAR', 'Blue Star'), ('YOUNG_STAR', 'Young Star'), ('WHITE_DWARF', 'White Dwarf'), ('BLACK_HOLE', 'Black Hole'), ('HYPERGIANT', 'Hypergiant'), ('NEBULA', 'Nebula'), ('UNSTABLE', 'Unstable')], max_length=500)),
                ('x', models.IntegerField(verbose_name='relative position of the system in the sector in the x axis.')),
                ('y', models.IntegerField(verbose_name='relative position of the system in the sector in the y axis.')),
            ],
        ),
        migrations.CreateModel(
            name='TradeGood',
            fields=[
                ('symbol', models.CharField(choices=[('PRECIOUS_STONES', 'Precious Stones'), ('QUARTZ_SAND', 'Quartz Sand'), ('SILICON_CRYSTALS', 'Silicon Crystals'), ('AMMONIA_ICE', 'Ammonia Ice'), ('LIQUID_HYDROGEN', 'Liquid Hydrogen'), ('LIQUID_NITROGEN', 'Liquid Nitrogen'), ('ICE_WATER', 'Ice Water'), ('EXOTIC_MATTER', 'Exotic Matter'), ('ADVANCED_CIRCUITRY', 'Advanced Circuitry'), ('GRAVITON_EMITTERS', 'Graviton Emitters'), ('IRON', 'Iron'), ('IRON_ORE', 'Iron Ore'), ('COPPER', 'Copper'), ('COPPER_ORE', 'Copper Ore'), ('ALUMINUM', 'Aluminum'), ('ALUMINUM_ORE', 'Aluminum Ore'), ('SILVER', 'Silver'), ('SILVER_ORE', 'Silver Ore'), ('GOLD', 'Gold'), ('GOLD_ORE', 'Gold Ore'), ('PLATINUM', 'Platinum'), ('PLATINUM_ORE', 'Platinum Ore'), ('DIAMONDS', 'Diamonds'), ('URANITE', 'Uranite'), ('URANITE_ORE', 'Uranite Ore'), ('MERITIUM', 'Meritium'), ('MERITIUM_ORE', 'Meritium Ore'), ('HYDROCARBON', 'Hydrocarbon'), ('ANTIMATTER', 'Antimatter'), ('FERTILIZERS', 'Fertilizers'), ('FABRICS', 'Fabrics'), ('FOOD', 'Food'), ('JEWELRY', 'Jewelry'), ('MACHINERY', 'Machinery'), ('FIREARMS', 'Firearms'), ('ASSAULT_RIFLES', 'Assault Rifles'), ('MILITARY_EQUIPMENT', 'Military Equipment'), ('EXPLOSIVES', 'Explosives'), ('LAB_INSTRUMENTS', 'Lab Instruments'), ('AMMUNITION', 'Ammunition'), ('ELECTRONICS', 'Electronics'), ('SHIP_PLATING', 'Ship Plating'), ('EQUIPMENT', 'Equipment'), ('FUEL', 'Fuel'), ('MEDICINE', 'Medicine'), ('DRUGS', 'Drugs'), ('CLOTHING', 'Clothing'), ('MICROPROCESSORS', 'Microprocessors'), ('PLASTICS', 'Plastics'), ('POLYNUCLEOTIDES', 'Polynucleotides'), ('BIOCOMPOSITES', 'Biocomposites'), ('NANOBOTS', 'Nanobots'), ('AI_MAINFRAMES', 'Ai Mainframes'), ('QUANTUM_DRIVES', 'Quantum Drives'), ('ROBOTIC_DRONES', 'Robotic Drones'), ('CYBER_IMPLANTS', 'Cyber Implants'), ('GENE_THERAPEUTICS', 'Gene Therapeutics'), ('NEURAL_CHIPS', 'Neural Chips'), ('MOOD_REGULATORS', 'Mood Regulators'), ('VIRAL_AGENTS', 'Viral Agents'), ('MICRO_FUSION_GENERATORS', 'Micro Fusion Generators'), ('SUPERGRAINS', 'Supergrains'), ('LASER_RIFLES', 'Laser Rifles'), ('HOLOGRAPHICS', 'Holographics'), ('SHIP_SALVAGE', 'Ship Salvage'), ('RELIC_TECH', 'Relic Tech'), ('NOVEL_LIFEFORMS', 'Novel Lifeforms'), ('BOTANICAL_SPECIMENS', 'Botanical Specimens'), ('CULTURAL_ARTIFACTS', 'Cultural Artifacts'), ('REACTOR_SOLAR_I', 'Reactor Solar I'), ('REACTOR_FUSION_I', 'Reactor Fusion I'), ('REACTOR_FISSION_I', 'Reactor Fission I'), ('REACTOR_CHEMICAL_I', 'Reactor Chemical I'), ('REACTOR_ANTIMATTER_I', 'Reactor Antimatter I'), ('ENGINE_IMPULSE_DRIVE_I', 'Engine Impulse Drive I'), ('ENGINE_ION_DRIVE_I', 'Engine Ion Drive I'), ('ENGINE_ION_DRIVE_II', 'Engine Ion Drive II'), ('ENGINE_HYPER_DRIVE_I', 'Engine Hyper Drive I'), ('MODULE_MINERAL_PROCESSOR_I', 'Module Mineral Processor I'), ('MODULE_CARGO_HOLD_I', ' Module Cargo Hold I'), ('MODULE_CREW_QUARTERS_I', ' Module Crew Quarters I'), ('MODULE_ENVOY_QUARTERS_I', ' Module Envoy Quarters I'), ('MODULE_PASSENGER_CABIN_I', ' Module Passenger Cabin I'), ('MODULE_MICRO_REFINERY_I', ' Module Micro Refinery_I'), ('MODULE_ORE_REFINERY_I', ' Module Ore Refinery_I'), ('MODULE_FUEL_REFINERY_I', ' Module Fuel Refinery I'), ('MODULE_SCIENCE_LAB_I', ' Module Science Lab I'), ('MODULE_JUMP_DRIVE_I', ' Module Jump Drive_I'), ('MODULE_JUMP_DRIVE_II', ' Module Jump Drive_II'), ('MODULE_JUMP_DRIVE_III', ' Module Jump Drive III'), ('MODULE_WARP_DRIVE_I', ' Module Warp Drive I'), ('MODULE_WARP_DRIVE_II', ' Module Warp Drive II'), ('MODULE_WARP_DRIVE_III', ' Module Warp Drive III'), ('MODULE_SHIELD_GENERATOR_I', ' Module Shield Generator I'), ('MODULE_SHIELD_GENERATOR_II', ' Module Shield Generator II'), ('MOUNT_GAS_SIPHON_I', 'Mount Gas Siphon_I'), ('MOUNT_GAS_SIPHON_II', 'Mount Gas Siphon II'), ('MOUNT_GAS_SIPHON_III', 'Mount Gas Siphon III'), ('MOUNT_SURVEYOR_I', 'Mount Surveyor I'), ('MOUNT_SURVEYOR_II', 'Mount Surveyor II'), ('MOUNT_SURVEYOR_III', 'Mount Surveyor III'), ('MOUNT_SENSOR_ARRAY_I', 'Mount Sensor Array I'), ('MOUNT_SENSOR_ARRAY_II', 'Mount Sensor Array II'), ('MOUNT_SENSOR_ARRAY_III', 'Mount Sensor Array III'), ('MOUNT_MINING_LASER_I', 'Mount Mining Laser I'), ('MOUNT_MINING_LASER_II', 'Mount Mining Laser II'), ('MOUNT_MINING_LASER_III', 'Mount Mining Laser III'), ('MOUNT_LASER_CANNON_I', 'Mount Laser Cannon I'), ('MOUNT_MISSILE_LAUNCHER_I', 'Mount Missile Launcher I'), ('MOUNT_TURRET_I', 'Mount Turret I')], max_length=500, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
                ('description', models.CharField(max_length=5000)),
            ],
        ),
        migrations.CreateModel(
            name='Waypoint',
            fields=[
                ('symbol', models.CharField(max_length=500, primary_key=True, serialize=False)),
                ('waypoint_type', models.CharField(choices=[('PLANET', 'Planet'), ('GAS_GIANT', 'Gas Giant'), ('MOON', 'Moon'), ('ORBITAL_STATION', 'Orbital Station'), ('JUMP_GATE', 'Jump Gate'), ('ASTEROID_FIELD', 'Asteroid Field'), ('NEBULA', 'Nebula'), ('DEBRIS_FIELD', 'Debris Field'), ('GRAVITY_WELL', 'Gravity Well')], max_length=500)),
                ('x', models.IntegerField(verbose_name='relative position of the waypoint in the system in the x axis.')),
                ('y', models.IntegerField(verbose_name='relative position of the waypoint in the system in the y axis.')),
                ('faction_symbol', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='factions.faction')),
                ('orbits', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='systems.waypoint', verbose_name='the symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.')),
                ('system_symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.system')),
            ],
        ),
        migrations.CreateModel(
            name='WaypointTrait',
            fields=[
                ('symbol', models.CharField(choices=[('UNCHARTED', 'Uncharted'), ('MARKETPLACE', 'Marketplace'), ('SHIPYARD', 'Shipyard'), ('OUTPOST', 'Outpost'), ('SCATTERED_SETTLEMENTS', 'Scattered Settlements'), ('SPRAWLING_CITIES', 'Sprawling Cities'), ('MEGA_STRUCTURES', 'Mega Structures'), ('OVERCROWDED', 'Overcrowded'), ('HIGH_TECH', 'High Tech'), ('CORRUPT', 'Corrupt'), ('BUREAUCRATIC', 'Bureaucratic'), ('TRADING_HUB', 'Trading Hub'), ('INDUSTRIAL', 'Industrial'), ('BLACK_MARKET', 'Black Market'), ('RESEARCH_FACILITY', 'Research Facility'), ('MILITARY_BASE', 'Military Base'), ('SURVEILLANCE_OUTPOST', 'Surveillance Outpost'), ('EXPLORATION_OUTPOST', 'Exploration Outpost'), ('MINERAL_DEPOSITS', 'Mineral Deposits'), ('COMMON_METAL_DEPOSITS', 'Common Metal Deposits'), ('PRECIOUS_METAL_DEPOSITS', 'Precious Metal Deposits'), ('RARE_METAL_DEPOSITS', 'Rare Metal Deposits'), ('METHANE_POOLS', 'Methane Pools'), ('ICE_CRYSTALS', 'Ice Crystals'), ('EXPLOSIVE_GASES', 'Explosive Gases'), ('STRONG_MAGNETOSPHERE', 'Strong Magnetosphere'), ('VIBRANT_AURORAS', 'Vibrant Auroras'), ('SALT_FLATS', 'Salt Flats'), ('CANYONS', 'Canyons'), ('PERPETUAL_DAYLIGHT', 'Perpetual Daylight'), ('PERPETUAL_OVERCAST', 'Perpetual Overcast'), ('DRY_SEABEDS', 'Dry Seabeds'), ('MAGMA_SEAS', 'Magma Seas'), ('SUPERVOLCANOES', 'Supervolcanoes'), ('ASH_CLOUDS', 'Ash Clouds'), ('VAST_RUINS', 'Vast Ruins'), ('MUTATED_FLORA', 'Mutated Flora'), ('TERRAFORMED', 'Terraformed'), ('EXTREME_TEMPERATURES', 'Extreme Temperatures'), ('EXTREME_PRESSURE', 'Extreme Pressure'), ('DIVERSE_LIFE', 'Diverse Life'), ('SCARCE_LIFE', 'Scarce Life'), ('FOSSILS', 'Fossils'), ('WEAK_GRAVITY', 'Weak Gravity'), ('STRONG_GRAVITY', 'Strong Gravity'), ('CRUSHING_GRAVITY', 'Crushing Gravity'), ('TOXIC_ATMOSPHERE', 'Toxic Atmosphere'), ('CORROSIVE_ATMOSPHERE', 'Corrosive Atmosphere'), ('BREATHABLE_ATMOSPHERE', 'Breathable Atmosphere'), ('JOVIAN', 'Jovian'), ('ROCKY', 'Rocky'), ('VOLCANIC', 'Volcanic'), ('FROZEN', 'Frozen'), ('SWAMP', 'Swamp'), ('BARREN', 'Barren'), ('TEMPERATE', 'Temperate'), ('JUNGLE', 'Jungle'), ('OCEAN', 'Ocean'), ('STRIPPED', 'Stripped')], max_length=500, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
                ('description', models.CharField(max_length=5000)),
            ],
        ),
        migrations.CreateModel(
            name='WaypointTraitLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('waypoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.waypoint')),
                ('waypoint_trait', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.waypointtrait')),
            ],
        ),
        migrations.AddField(
            model_name='waypoint',
            name='traits',
            field=models.ManyToManyField(related_name='waypoints', through='systems.WaypointTraitLink', to='systems.waypointtrait'),
        ),
        migrations.CreateModel(
            name='MarketTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('PURCHASE', 'Purchase'), ('SELL', 'Sell')], max_length=500)),
                ('units', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the number of units of the transaction.')),
                ('price_per_unit', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the price per unit of the transaction.')),
                ('total_price', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the total price of the transaction.')),
                ('timestamp', models.DateTimeField(verbose_name='the date and time the transaction was made.')),
                ('market', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.market')),
                ('ship_symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.ship')),
                ('trade_good', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.tradegood')),
            ],
        ),
        migrations.CreateModel(
            name='MarketTradeGoodLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.market')),
                ('trade_good', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.tradegood')),
            ],
        ),
        migrations.CreateModel(
            name='MarketImportLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.market')),
                ('trade_good', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.tradegood')),
            ],
        ),
        migrations.CreateModel(
            name='MarketExportLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.market')),
                ('trade_good', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.tradegood')),
            ],
        ),
        migrations.CreateModel(
            name='MarketExchangeLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.market')),
                ('trade_good', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.tradegood')),
            ],
        ),
        migrations.AddField(
            model_name='market',
            name='exchanges',
            field=models.ManyToManyField(related_name='exchanges', through='systems.MarketExchangeLink', to='systems.tradegood', verbose_name='the list of goods that are bought and sold between agents at this market.'),
        ),
        migrations.AddField(
            model_name='market',
            name='exports',
            field=models.ManyToManyField(related_name='exports', through='systems.MarketExportLink', to='systems.tradegood', verbose_name='the list of goods that are exported from this market.'),
        ),
        migrations.AddField(
            model_name='market',
            name='imports',
            field=models.ManyToManyField(related_name='imports', through='systems.MarketImportLink', to='systems.tradegood', verbose_name='the list of goods that are sought as imports in this market.'),
        ),
        migrations.AddField(
            model_name='market',
            name='symbol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.waypoint'),
        ),
        migrations.AddField(
            model_name='market',
            name='trade_goods',
            field=models.ManyToManyField(blank=True, related_name='market', through='systems.MarketTradeGoodLink', to='systems.tradegood', verbose_name='the list of goods that are traded at this market. Visible only when a ship is present at the market.'),
        ),
        migrations.CreateModel(
            name='JumpGateSystemLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(verbose_name='the distance of this system to the connected Jump Gate.')),
                ('jump_gate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.jumpgate')),
                ('system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.system')),
            ],
        ),
        migrations.AddField(
            model_name='jumpgate',
            name='connected_systems',
            field=models.ManyToManyField(related_name='jump_gates', through='systems.JumpGateSystemLink', to='systems.system'),
        ),
        migrations.AddField(
            model_name='jumpgate',
            name='faction_symbol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='factions.faction'),
        ),
        migrations.CreateModel(
            name='Chart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_on', models.DateTimeField(verbose_name='the date and time the chart was submitted.')),
                ('submitted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agents.agent', verbose_name='the agent that submitted the chart for this waypoint.')),
                ('waypoint_symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='systems.waypoint')),
            ],
        ),
    ]
