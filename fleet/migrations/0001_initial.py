# Generated by Django 4.2.6 on 2023-10-28 09:12

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('agents', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cooldown',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_seconds', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the total duration of the cooldown in seconds.')),
                ('remaining_seconds', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the remaining duration of the cooldown in seconds')),
                ('expiration', models.DateTimeField(blank=True, null=True, verbose_name='the date and time when the cooldown expires in ISO 8601 format.')),
            ],
        ),
        migrations.CreateModel(
            name='Engine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.')),
                ('speed', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.')),
            ],
        ),
        migrations.CreateModel(
            name='Frame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.')),
                ('module_slots', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.')),
                ('mountingPoints', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.')),
                ('fuelCapacity', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the maximum amount of fuel that can be stored in this ship. When refuelling, the ship will be refuelled to this amount.')),
            ],
        ),
        migrations.CreateModel(
            name='FuelConsumedLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the amount of fuel consumed by the most recent transit or action.')),
                ('timestamp', models.DateTimeField(verbose_name='the time at which the fuel was consumed.')),
            ],
        ),
        migrations.CreateModel(
            name='InstallationRequirements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('power', models.IntegerField(verbose_name='the amount of power required from the reactor.')),
                ('crew', models.IntegerField(verbose_name='the amount of crew required for operation.')),
                ('slots', models.IntegerField(verbose_name='the number of module slots required for installation.')),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.')),
                ('sensor_range', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.')),
            ],
        ),
        migrations.CreateModel(
            name='Mount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strength', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name="mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.")),
            ],
        ),
        migrations.CreateModel(
            name='MountDepositLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Reactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.')),
                ('power_output', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name="the amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.")),
            ],
        ),
        migrations.CreateModel(
            name='Ship',
            fields=[
                ('symbol', models.CharField(max_length=500, primary_key=True, serialize=False)),
                ('cargo_capacity', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the max number of items that can be stored in the cargo hold.')),
                ('cargo_units', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the number of items currently stored in the cargo hold.')),
                ('fuel_current', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name="the current amount of fuel in the ship's tanks.")),
                ('fuel_capacity', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
            ],
        ),
        migrations.CreateModel(
            name='ShipCargoInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('units', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='ShipComponent',
            fields=[
                ('symbol', models.CharField(choices=[('FRAME_PROBE', 'Frame Probe'), ('FRAME_DRONE', 'Frame Drone'), ('FRAME_INTERCEPTOR', 'Frame Interceptor'), ('FRAME_RACER', 'Frame Racer'), ('FRAME_FIGHTER', 'Frame Fighter'), ('FRAME_FRIGATE', 'Frame Frigate'), ('FRAME_SHUTTLE', 'Frame Shuttle'), ('FRAME_EXPLORER', 'Frame Explorer'), ('FRAME_MINER', 'Frame Miner'), ('FRAME_LIGHT_FREIGHTER', 'Frame Light Freighter'), ('FRAME_HEAVY_FREIGHTER', 'Frame Heavy Freighter'), ('FRAME_TRANSPORT', 'Frame Transport'), ('FRAME_DESTROYER', 'Frame Destroyer'), ('FRAME_CRUISER', 'Frame Cruiser'), ('FRAME_CARRIER', 'Frame Carrier'), ('REACTOR_SOLAR_I', 'Reactor Solar I'), ('REACTOR_FUSION_I', 'Reactor Fusion I'), ('REACTOR_FISSION_I', 'Reactor Fission I'), ('REACTOR_CHEMICAL_I', 'Reactor Chemical I'), ('REACTOR_ANTIMATTER_I', 'Reactor Antimatter I'), ('ENGINE_IMPULSE_DRIVE_I', 'Engine Impulse Drive I'), ('ENGINE_ION_DRIVE_I', 'Engine Ion Drive I'), ('ENGINE_ION_DRIVE_II', 'Engine Ion Drive II'), ('ENGINE_HYPER_DRIVE_I', 'Engine Hyper Drive I'), ('MODULE_MINERAL_PROCESSOR_I', 'Module Mineral Processor I'), ('MODULE_CARGO_HOLD_I', 'Module Cargo Hold I'), ('MODULE_CREW_QUARTERS_I', 'Module Crew Quarters I'), ('MODULE_ENVOY_QUARTERS_I', 'Module Envoy Quarters I'), ('MODULE_PASSENGER_CABIN_I', 'Module Passenger Cabin I'), ('MODULE_MICRO_REFINERY_I', 'Module Micro Refinery I'), ('MODULE_ORE_REFINERY_I', 'Module Ore Refinery I'), ('MODULE_FUEL_REFINERY_I', 'Module Fuel Refinery I'), ('MODULE_SCIENCE_LAB_I', 'Module Science Lab I'), ('MODULE_JUMP_DRIVE_I', 'Module Jump Drive I'), ('MODULE_JUMP_DRIVE_II', 'Module Jump Drive II'), ('MODULE_JUMP_DRIVE_III', 'Module Jump Drive III'), ('MODULE_WARP_DRIVE_I', 'Module Warp Drive I'), ('MODULE_WARP_DRIVE_II', 'Module Warp Drive II'), ('MODULE_WARP_DRIVE_III', 'Module Warp Drive III'), ('MODULE_SHIELD_GENERATOR_I', 'Module Shield Generator I'), ('MODULE_SHIELD_GENERATOR_II', 'Module Shield Generator II'), ('MOUNT_GAS_SIPHON_I', 'Mount Gas Siphon I'), ('MOUNT_GAS_SIPHON_II', 'Mount Gas Siphon II'), ('MOUNT_GAS_SIPHON_III', 'Mount Gas Siphon III'), ('MOUNT_SURVEYOR_I', 'Mount Surveyor I'), ('MOUNT_SURVEYOR_II', 'Mount Surveyor II'), ('MOUNT_SURVEYOR_III', 'Mount Surveyor III'), ('MOUNT_SENSOR_ARRAY_I', 'Mount Sensor Array I'), ('MOUNT_SENSOR_ARRAY_II', 'Mount Sensor Array II'), ('MOUNT_SENSOR_ARRAY_III', 'Mount Sensor Array III'), ('MOUNT_MINING_LASER_I', 'Mount Mining Laser I'), ('MOUNT_MINING_LASER_II', 'Mount Mining Laser II'), ('MOUNT_MINING_LASER_III', 'Mount Mining Laser III'), ('MOUNT_LASER_CANNON_I', 'Mount Laser Cannon I'), ('MOUNT_MISSILE_LAUNCHER_I', 'Mount Missile Launcher I'), ('MOUNT_TURRET_I', 'Mount Turret I')], max_length=500, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
                ('description', models.CharField(max_length=5000)),
            ],
        ),
        migrations.CreateModel(
            name='ShipCrew',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current', models.IntegerField(verbose_name='the current number of crew members on the ship.')),
                ('required', models.IntegerField(verbose_name='the minimum number of crew members required to maintain the ship.')),
                ('capacity', models.IntegerField(default=0, verbose_name='the maximum number of crew members the ship can support.')),
                ('rotation', models.CharField(choices=[('STRICT', 'Strict'), ('RELAXED', 'Relaxed')], default='STRICT', max_length=7, verbose_name="the rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.")),
                ('morale', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name="a rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.")),
                ('wages', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.')),
            ],
        ),
        migrations.CreateModel(
            name='ShipModuleLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ShipMountLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ShipNav',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('IN_TRANSIT', 'In Transit'), ('IN_ORBIT', 'In Orbit'), ('DOCKED', 'Docked')], max_length=500)),
                ('flight_mode', models.CharField(choices=[('DRIFT', 'Drift'), ('STEALTH', 'Stealth'), ('CRUISE', 'Cruise'), ('BURN', 'Burn')], default='CRUISE', max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='ShipNavRoute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departure_time', models.DateTimeField()),
                ('arrival_time', models.DateTimeField(verbose_name="the date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.")),
            ],
        ),
        migrations.CreateModel(
            name='ShipRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('ship_role', models.CharField(choices=[('FABRICATOR', 'Fabricator'), ('HARVESTER', 'Harvester'), ('HAULER', 'Hauler'), ('INTERCEPTOR', 'Interceptor'), ('EXCAVATOR', 'Excavator'), ('TRANSPORT', 'Transport'), ('REPAIR', 'Repair'), ('SURVEYOR', 'Surveyor'), ('COMMAND', 'Command'), ('CARRIER', 'Carrier'), ('PATROL', 'Patrol'), ('SATELLITE', 'Satellite'), ('EXPLORER', 'Explorer'), ('REFINERY', 'Refinery')], max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Shipyard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modifications_fee', models.IntegerField(verbose_name='the fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies.')),
            ],
        ),
        migrations.CreateModel(
            name='ShipyardShip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ship_type', models.CharField(choices=[('SHIP_PROBE', 'Ship Probe'), ('SHIP_MINING_DRONE', 'Ship Mining Drone'), ('SHIP_INTERCEPTOR', 'Ship Interceptor'), ('SHIP_LIGHT_HAULER', 'Ship Light Hauler'), ('SHIP_COMMAND_FRIGATE', 'Ship Command Frigate'), ('SHIP_EXPLORER', 'Ship Explorer'), ('SHIP_HEAVY_FREIGHTER', 'Ship Heavy Freighter'), ('SHIP_LIGHT_SHUTTLE', 'Ship Light Shuttle'), ('SHIP_ORE_HOUND', 'Ship Ore Hound'), ('SHIP_REFINING_FREIGHTER', 'Ship Refining Freighter')], max_length=500)),
                ('name', models.CharField(max_length=500)),
                ('description', models.CharField(max_length=5000)),
                ('purchase_price', models.IntegerField()),
                ('crew', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.shipcrew')),
                ('engine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.engine')),
                ('frame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.frame')),
            ],
        ),
        migrations.CreateModel(
            name='ShipyardTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='the price of the transaction.')),
                ('timestamp', models.DateTimeField()),
                ('agent_symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agents.agent', verbose_name='the symbol of the agent that made the transaction.')),
                ('ship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.ship', verbose_name='the symbol of the ship that was the subject of the transaction.')),
                ('shipyard_waypoint_symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.shipyard', verbose_name='the symbol of the waypoint where the transaction took place.')),
            ],
        ),
        migrations.CreateModel(
            name='ShipyardShipMountLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mount', models.ForeignKey(choices=[('MOUNT_GAS_SIPHON_I', 'Mount Gas Siphon I'), ('MOUNT_GAS_SIPHON_II', 'Mount Gas Siphon II'), ('MOUNT_GAS_SIPHON_III', 'Mount Gas Siphon III'), ('MOUNT_SURVEYOR_I', 'Mount Surveyor I'), ('MOUNT_SURVEYOR_II', 'Mount Surveyor II'), ('MOUNT_SURVEYOR_III', 'Mount Surveyor III'), ('MOUNT_SENSOR_ARRAY_I', 'Mount Sensor Array I'), ('MOUNT_SENSOR_ARRAY_II', 'Mount Sensor Array II'), ('MOUNT_SENSOR_ARRAY_III', 'Mount Sensor Array III'), ('MOUNT_MINING_LASER_I', 'Mount Mining Laser I'), ('MOUNT_MINING_LASER_II', 'Mount Mining Laser II'), ('MOUNT_MINING_LASER_III', 'Mount Mining Laser III'), ('MOUNT_LASER_CANNON_I', 'Mount Laser Cannon I'), ('MOUNT_MISSILE_LAUNCHER_I', 'Mount Missile Launcher I'), ('MOUNT_TURRET_I', 'Mount Turret I')], on_delete=django.db.models.deletion.CASCADE, to='fleet.mount')),
                ('shipyard_ship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.shipyardship')),
            ],
        ),
        migrations.CreateModel(
            name='ShipyardShipModuleLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module', models.ForeignKey(choices=[('MODULE_MINERAL_PROCESSOR_I', 'Module Mineral Processor I'), ('MODULE_CARGO_HOLD_I', 'Module Cargo Hold I'), ('MODULE_CREW_QUARTERS_I', 'Module Crew Quarters I'), ('MODULE_ENVOY_QUARTERS_I', 'Module Envoy Quarters I'), ('MODULE_PASSENGER_CABIN_I', 'Module Passenger Cabin I'), ('MODULE_MICRO_REFINERY_I', 'Module Micro Refinery I'), ('MODULE_ORE_REFINERY_I', 'Module Ore Refinery I'), ('MODULE_FUEL_REFINERY_I', 'Module Fuel Refinery I'), ('MODULE_SCIENCE_LAB_I', 'Module Science Lab I'), ('MODULE_JUMP_DRIVE_I', 'Module Jump Drive I'), ('MODULE_JUMP_DRIVE_II', 'Module Jump Drive II'), ('MODULE_JUMP_DRIVE_III', 'Module Jump Drive III'), ('MODULE_WARP_DRIVE_I', 'Module Warp Drive I'), ('MODULE_WARP_DRIVE_II', 'Module Warp Drive II'), ('MODULE_WARP_DRIVE_III', 'Module Warp Drive III'), ('MODULE_SHIELD_GENERATOR_I', 'Module Shield Generator I'), ('MODULE_SHIELD_GENERATOR_II', 'Module Shield Generator II')], on_delete=django.db.models.deletion.CASCADE, to='fleet.module')),
                ('shipyard_ship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.shipyardship')),
            ],
        ),
        migrations.CreateModel(
            name='ShipyardShipLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shipyard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.shipyard')),
                ('shipyard_ship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.shipyardship')),
            ],
        ),
        migrations.AddField(
            model_name='shipyardship',
            name='modules',
            field=models.ManyToManyField(related_name='shipyard_ships', through='fleet.ShipyardShipModuleLink', to='fleet.module'),
        ),
        migrations.AddField(
            model_name='shipyardship',
            name='mounts',
            field=models.ManyToManyField(related_name='shipyard_ships', through='fleet.ShipyardShipMountLink', to='fleet.mount'),
        ),
        migrations.AddField(
            model_name='shipyardship',
            name='reactor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet.reactor'),
        ),
        migrations.AddField(
            model_name='shipyard',
            name='ships',
            field=models.ManyToManyField(related_name='shipyards', through='fleet.ShipyardShipLink', to='fleet.shipyardship', verbose_name='the list of ship types available for purchase at this shipyard..'),
        ),
    ]
